Description: >
    VPC with public and private subnets across 2 AZ with an Internet Gateway and pair of NAT
    Gateways, deploys an ECS cluster distributed across multiple AZ and ECS services from ECR
    Last Modified: 8th February 2019
    Author: Pradeep T <pradeep.t@infosys.com>

# Parameters:

    # HostedZoneName:
    #     Type: String
    # #     Default: company.com
    # Subdomain:
    #     Type: String
    # #     Default: myservice
    # MinContainers:
    #     Type: Number
    #     Default: 1
    # MaxContainers:
    #     Type: Number
    #     Default: 2
    # AutoScalingTargetValue:
    #     Type: Number
    #     Default: 50


Resources:


    # DNSRecord:
    #     Type: AWS::Route53::RecordSet
    #     Properties:
    #         HostedZoneName: !Join ['', [!Ref HostedZoneName, .]]
    #         Name: !Join ['', [!Ref Subdomain, ., !Ref HostedZoneName, .]]
    #         Type: A
    #         AliasTarget:
    #             DNSName: !GetAtt LoadBalancer.DNSName
    #             HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID


  #     AutoScalingRole:
  #       Type: AWS::IAM::Role
  #       Properties:
  #         RoleName: !Join ['', [!Ref EnvironmentName, AutoScalingRole]]
  #         AssumeRolePolicyDocument:
  #           Statement:
  #             - Effect: Allow
  #               Principal:
  #                 Service: ecs-tasks.amazonaws.com
  #               Action: 'sts:AssumeRole'
  #         ManagedPolicyArns:
  #           - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole'

  # AutoScalingTarget:
  #   Type: AWS::ApplicationAutoScaling::ScalableTarget
  #   Properties:
  #     MinCapacity: !Ref MinContainers
  #     MaxCapacity: !Ref MaxContainers
  #     ResourceId: !Join ['/', [service, !Ref Cluster, !GetAtt Service.Name]]
  #     ScalableDimension: ecs:service:DesiredCount
  #     ServiceNamespace: ecs
  #     # "The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that allows Application Auto Scaling to modify your scalable target."
  #     RoleARN: !GetAtt AutoScalingRole.Arn
  # AutoScalingPolicy:
  #   Type: AWS::ApplicationAutoScaling::ScalingPolicy
  #   Properties:
  #     PolicyName: !Join ['', [!Ref ServiceName, AutoScalingPolicy]]
  #     PolicyType: TargetTrackingScaling
  #     ScalingTargetId: !Ref AutoScalingTarget
  #     TargetTrackingScalingPolicyConfiguration:
  #       PredefinedMetricSpecification:
  #         PredefinedMetricType: ECSServiceAverageCPUUtilization
  #       ScaleInCooldown: 10
  #       ScaleOutCooldown: 10
  #       # Keep things at or lower than 50% CPU utilization, for example
  #       TargetValue: !Ref AutoScalingTargetValue


Outputs:
